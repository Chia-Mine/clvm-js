import { SExp } from "./SExp";
import { Tuple } from "./__type_compatibility__";
import { int, str } from "./__python_types__";
export declare function malloc_cost(cost: int, atom: SExp): Tuple<number, SExp>;
export declare function op_sha256(args: SExp): Tuple<number, SExp>;
export declare function args_as_ints(op_name: str, args: SExp): Generator<Tuple<number, number>, void, unknown>;
export declare function args_as_int32(op_name: str, args: SExp): Generator<number, void, unknown>;
export declare function args_as_int_list(op_name: str, args: SExp, count: int): Tuple<number, number>[];
export declare function args_as_bools(op_name: str, args: SExp): Generator<SExp, void, unknown>;
export declare function args_as_bool_list(op_name: str, args: SExp, count: int): SExp[];
export declare function op_add(args: SExp): Tuple<number, SExp>;
export declare function op_subtract(args: SExp): Tuple<number, SExp>;
export declare function op_multiply(args: SExp): Tuple<number, SExp>;
export declare function op_divmod(args: SExp): Tuple<number, SExp>;
export declare function op_div(args: SExp): Tuple<number, SExp>;
export declare function op_gr(args: SExp): Tuple<number, SExp>;
export declare function op_gr_bytes(args: SExp): Tuple<number, SExp>;
export declare function op_pubkey_for_exp(items: SExp): Tuple<number, SExp>;
export declare function op_strlen(args: SExp): Tuple<number, SExp>;
export declare function op_substr(args: SExp): Tuple<number, SExp>;
export declare function op_concat(args: SExp): Tuple<number, SExp>;
export declare function op_ash(args: SExp): Tuple<number, SExp>;
export declare function op_lsh(args: SExp): Tuple<number, SExp>;
export declare function binop_reduction(op_name: str, initial_value: number, args: SExp, op_f: Function): Tuple<number, SExp>;
export declare function op_logand(args: SExp): Tuple<number, SExp>;
export declare function op_logior(args: SExp): Tuple<number, SExp>;
export declare function op_logxor(args: SExp): Tuple<number, SExp>;
export declare function op_lognot(args: SExp): Tuple<number, SExp>;
export declare function op_not(args: SExp): Tuple<number, SExp>;
export declare function op_any(args: SExp): Tuple<number, SExp>;
export declare function op_all(args: SExp): Tuple<number, SExp>;
export declare function op_softfork(args: SExp): Tuple<number, SExp>;
